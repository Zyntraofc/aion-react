name: CD (Deploy to Render)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Evita deploys concorrentes (o último cancela o anterior em progresso)
concurrency:
  group: render-deploy-main
  cancel-in-progress: true

permissions:
  contents: read

env:
  BUILD_DIR: dist

jobs:
  deploy:
    name: Build & Deploy to Render
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Detect package manager
        id: pkg
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
          elif [ -f package-lock.json ]; then
            echo "manager=npm-ci" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: |
          case "${{ steps.pkg.outputs.manager }}" in
            pnpm)
              corepack enable
              pnpm install --frozen-lockfile
              ;;
            yarn)
              yarn install --frozen-lockfile
              ;;
            npm-ci)
              npm ci
              ;;
            npm)
              npm install
              ;;
          esac

      - name: Build
        run: |
          if npm run | grep -q "build"; then
            npm run build
          else
            echo "Nenhum script build definido."
          fi

      - name: List build output
        run: ls -al $BUILD_DIR || (echo "Diretório de build não encontrado." && exit 1)

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Trigger Render deployment
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "Segredos RENDER_API_KEY ou RENDER_SERVICE_ID não configurados."
            exit 1
          fi

          echo "Disparando deploy para serviço $RENDER_SERVICE_ID..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys")

          echo "$RESPONSE" | jq '.'

          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPLOY_ID" ]; then
            echo "Falha ao obter ID do deploy."
            exit 1
          fi
          echo "Deploy iniciado: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: Poll deploy status
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          ATTEMPTS=30
          SLEEP=15
          echo "Verificando status do deploy (até $ATTEMPTS tentativas)..."
          for ((i=1;i<=ATTEMPTS;i++)); do
            DEPLOY_JSON=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$DEPLOY_ID")

            STATUS=$(echo "$DEPLOY_JSON" | jq -r '.status // "unknown"')
            echo "Tentativa $i: status = $STATUS"

            case "$STATUS" in
              live)
                echo "Deploy finalizado com sucesso."
                exit 0
                ;;
              build_failed|update_failed|canceled|failed)
                echo "Deploy falhou: $STATUS"
                echo "$DEPLOY_JSON" | jq '.'
                exit 1
                ;;
            esac

            sleep $SLEEP
          done

          echo "Timeout aguardando deploy ficar live."
          exit 1

      - name: Output site URL
        run: echo "Aplicação disponível (quando live) em: https://ms-aion-react-v1.onrender.com"